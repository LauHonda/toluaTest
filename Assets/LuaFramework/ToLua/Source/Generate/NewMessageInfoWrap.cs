//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NewMessageInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NewMessageInfo), typeof(System.Object));
		L.RegFunction("RemoveData", RemoveData);
		L.RegFunction("GetData", GetData);
		L.RegFunction("AddData", AddData);
		L.RegFunction("Clear", Clear);
		L.RegFunction("SetActionName", SetActionName);
		L.RegFunction("New", _CreateNewMessageInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("NoShow", get_NoShow, set_NoShow);
		L.RegVar("AddTag", get_AddTag, set_AddTag);
		L.RegVar("Receivemodel", get_Receivemodel, set_Receivemodel);
		L.RegVar("ShareModel", get_ShareModel, set_ShareModel);
		L.RegVar("CutCount", get_CutCount, set_CutCount);
		L.RegVar("HeaderName", get_HeaderName, set_HeaderName);
		L.RegVar("DataName", get_DataName, set_DataName);
		L.RegVar("NeedReplayName", get_NeedReplayName, set_NeedReplayName);
		L.RegVar("ReplayName", get_ReplayName, set_ReplayName);
		L.RegVar("GetBase", get_GetBase, set_GetBase);
		L.RegVar("SendData", get_SendData, set_SendData);
		L.RegVar("Action", get_Action, set_Action);
		L.RegVar("BackDataGet", get_BackDataGet, set_BackDataGet);
		L.RegVar("BackData", get_BackData, set_BackData);
		L.RegVar("DebugData", get_DebugData, set_DebugData);
		L.RegVar("ErrorCode", get_ErrorCode, set_ErrorCode);
		L.RegVar("ErrorMsg", get_ErrorMsg, set_ErrorMsg);
		L.RegVar("ShowMessage", get_ShowMessage, set_ShowMessage);
		L.RegVar("GetDataList", get_GetDataList, set_GetDataList);
		L.RegVar("MyListMessage", get_MyListMessage, set_MyListMessage);
		L.RegVar("URL", get_URL, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNewMessageInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NewMessageInfo obj = new NewMessageInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NewMessageInfo.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Collections.Generic.Dictionary<string,string>>(L, 2))
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				System.Collections.Generic.Dictionary<string,string> arg0 = (System.Collections.Generic.Dictionary<string,string>)ToLua.ToObject(L, 2);
				obj.GetData(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.GetData(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NewMessageInfo.GetData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.AddData(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.AddData(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Func<string,bool> arg3 = (System.Func<string,bool>)ToLua.CheckDelegate<System.Func<string,bool>>(L, 5);
				obj.AddData(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Func<string,bool> arg3 = (System.Func<string,bool>)ToLua.CheckDelegate<System.Func<string,bool>>(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				obj.AddData(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 7)
			{
				NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				System.Func<string,bool> arg3 = (System.Func<string,bool>)ToLua.CheckDelegate<System.Func<string,bool>>(L, 5);
				string arg4 = ToLua.CheckString(L, 6);
				System.Func<string,string,bool> arg5 = (System.Func<string,string,bool>)ToLua.CheckDelegate<System.Func<string,string,bool>>(L, 7);
				obj.AddData(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NewMessageInfo.AddData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActionName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NewMessageInfo obj = (NewMessageInfo)ToLua.CheckObject<NewMessageInfo>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetActionName(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool ret = obj.NoShow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NoShow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AddTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.AddTag;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AddTag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Receivemodel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			TypeClass.ReceiveType ret = obj.Receivemodel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Receivemodel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShareModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<HttpModel> ret = obj.ShareModel;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShareModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CutCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			int ret = obj.CutCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CutCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HeaderName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.HeaderName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HeaderName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.DataName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NeedReplayName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool ret = obj.NeedReplayName;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NeedReplayName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReplayName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.ReplayName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReplayName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetBase(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			BaseData ret = obj.GetBase;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GetBase on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<DataValue> ret = obj.SendData;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Action(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool ret = obj.Action;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Action on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BackDataGet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			BackDataValue[] ret = obj.BackDataGet;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackDataGet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BackData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<string> ret = obj.BackData;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DebugData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.DebugData;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DebugData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.ErrorCode;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ErrorCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.ErrorMsg;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ErrorMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShowMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.ShowMessage;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShowMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string[] ret = obj.GetDataList;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GetDataList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MyListMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			ListMessage ret = obj.MyListMessage;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MyListMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_URL(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string ret = obj.URL;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index URL on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NoShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.NoShow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NoShow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AddTag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddTag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AddTag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Receivemodel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			TypeClass.ReceiveType arg0 = (TypeClass.ReceiveType)ToLua.CheckObject(L, 2, typeof(TypeClass.ReceiveType));
			obj.Receivemodel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Receivemodel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShareModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<HttpModel> arg0 = (System.Collections.Generic.List<HttpModel>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<HttpModel>));
			obj.ShareModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShareModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CutCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CutCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CutCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HeaderName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.HeaderName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HeaderName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DataName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.DataName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DataName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NeedReplayName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.NeedReplayName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NeedReplayName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReplayName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ReplayName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReplayName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetBase(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			BaseData arg0 = (BaseData)ToLua.CheckObject<BaseData>(L, 2);
			obj.GetBase = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GetBase on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<DataValue> arg0 = (System.Collections.Generic.List<DataValue>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<DataValue>));
			obj.SendData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Action(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Action = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Action on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BackDataGet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			BackDataValue[] arg0 = ToLua.CheckObjectArray<BackDataValue>(L, 2);
			obj.BackDataGet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackDataGet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BackData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.BackData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BackData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DebugData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.DebugData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DebugData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ErrorCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ErrorCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ErrorCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ErrorMsg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ErrorMsg = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ErrorMsg on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShowMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ShowMessage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ShowMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetDataList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.GetDataList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GetDataList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MyListMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NewMessageInfo obj = (NewMessageInfo)o;
			ListMessage arg0 = (ListMessage)ToLua.CheckObject<ListMessage>(L, 2);
			obj.MyListMessage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MyListMessage on a nil value");
		}
	}
}

