//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MessageManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MessageManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("ShowBar", ShowBar);
		L.RegFunction("WindowShowMessage", WindowShowMessage);
		L.RegFunction("QuiteGame", QuiteGame);
		L.RegFunction("AddLockNub", AddLockNub);
		L.RegFunction("DisLockNub", DisLockNub);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("GetMessageManager", get_GetMessageManager, set_GetMessageManager);
		L.RegVar("LoadNub", get_LoadNub, set_LoadNub);
		L.RegVar("StatusNub", get_StatusNub, set_StatusNub);
		L.RegVar("Http", get_Http, set_Http);
		L.RegVar("HttpModel", get_HttpModel, set_HttpModel);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowBar(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.ShowBar(arg0);
				return 0;
			}
			else if (count == 3)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.ShowBar(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MessageManager.ShowBar");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WindowShowMessage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.WindowShowMessage(arg0);
				return 0;
			}
			else if (count == 3)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.WindowShowMessage(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.CheckDelegate<UnityEngine.Events.UnityAction>(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.WindowShowMessage(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.CheckDelegate<UnityEngine.Events.UnityAction>(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				obj.WindowShowMessage(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.Events.UnityAction arg1 = (UnityEngine.Events.UnityAction)ToLua.CheckDelegate<UnityEngine.Events.UnityAction>(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				obj.WindowShowMessage(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: MessageManager.WindowShowMessage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int QuiteGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
			obj.QuiteGame();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLockNub(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
			obj.AddLockNub();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisLockNub(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MessageManager obj = (MessageManager)ToLua.CheckObject<MessageManager>(L, 1);
			obj.DisLockNub();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GetMessageManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, MessageManager.GetMessageManager);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadNub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			int ret = obj.LoadNub;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadNub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StatusNub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			int ret = obj.StatusNub;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusNub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Http(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			DicBase<Http> ret = obj.Http;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Http on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HttpModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			DicBase<HttpBase> ret = obj.HttpModel;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HttpModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GetMessageManager(IntPtr L)
	{
		try
		{
			MessageManager arg0 = (MessageManager)ToLua.CheckObject<MessageManager>(L, 2);
			MessageManager.GetMessageManager = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadNub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LoadNub = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadNub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StatusNub(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.StatusNub = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusNub on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Http(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			DicBase<Http> arg0 = (DicBase<Http>)ToLua.CheckObject<DicBase<Http>>(L, 2);
			obj.Http = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Http on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HttpModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MessageManager obj = (MessageManager)o;
			DicBase<HttpBase> arg0 = (DicBase<HttpBase>)ToLua.CheckObject<DicBase<HttpBase>>(L, 2);
			obj.HttpModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HttpModel on a nil value");
		}
	}
}

