//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpCodeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(HttpCode));
		L.RegVar("SUCCESS", get_SUCCESS, null);
		L.RegVar("FAILED", get_FAILED, null);
		L.RegVar("UPDATE", get_UPDATE, null);
		L.RegVar("ERROR", get_ERROR, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<HttpCode>.Check = CheckType;
		StackTraits<HttpCode>.Push = Push;
	}

	static void Push(IntPtr L, HttpCode arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(HttpCode), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SUCCESS(IntPtr L)
	{
		ToLua.Push(L, HttpCode.SUCCESS);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FAILED(IntPtr L)
	{
		ToLua.Push(L, HttpCode.FAILED);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UPDATE(IntPtr L)
	{
		ToLua.Push(L, HttpCode.UPDATE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ERROR(IntPtr L)
	{
		ToLua.Push(L, HttpCode.ERROR);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		HttpCode o = (HttpCode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

