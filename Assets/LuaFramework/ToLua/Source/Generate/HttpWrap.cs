//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Http), typeof(NewMessageInfo));
		L.RegFunction("SetUrl", SetUrl);
		L.RegFunction("HttpSuccessCallBack", HttpSuccessCallBack);
		L.RegFunction("Send", Send);
		L.RegFunction("UpdateData", UpdateData);
		L.RegFunction("New", _CreateHttp);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EntityHttp", get_EntityHttp, set_EntityHttp);
		L.RegVar("CurrentData", get_CurrentData, set_CurrentData);
		L.RegVar("CurrentJsonData", get_CurrentJsonData, set_CurrentJsonData);
		L.RegVar("HttpActivity", get_HttpActivity, set_HttpActivity);
		L.RegVar("CurrentModel", get_CurrentModel, set_CurrentModel);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHttp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Http obj = new Http();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Http obj = new Http(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				Http obj = new Http(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Http.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetUrl(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HttpSuccessCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
			System.Action<HttpCallBackMessage> arg0 = (System.Action<HttpCallBackMessage>)ToLua.CheckDelegate<System.Action<HttpCallBackMessage>>(L, 2);
			obj.HttpSuccessCallBack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				obj.Send();
				return 0;
			}
			else if (count == 2)
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Send(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.Send(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Http.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				LitJson.JsonData arg0 = (LitJson.JsonData)ToLua.CheckObject<LitJson.JsonData>(L, 2);
				obj.UpdateData(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<LitJson.JsonData>(L, 3))
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LitJson.JsonData arg1 = (LitJson.JsonData)ToLua.ToObject(L, 3);
				obj.UpdateData(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string>(L, 3))
			{
				Http obj = (Http)ToLua.CheckObject<Http>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.UpdateData(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Http.UpdateData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EntityHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			DicBase<Http> ret = obj.EntityHttp;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EntityHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.Value<HttpCallBackMessage> ret = obj.CurrentData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentJsonData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.Value<LitJson.JsonData> ret = obj.CurrentJsonData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentJsonData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HttpActivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.AttemptFunc ret = obj.HttpActivity;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HttpActivity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			HttpModel ret = obj.CurrentModel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentModel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EntityHttp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			DicBase<Http> arg0 = (DicBase<Http>)ToLua.CheckObject<DicBase<Http>>(L, 2);
			obj.EntityHttp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EntityHttp on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.Value<HttpCallBackMessage> arg0 = (UltimateDH.Value<HttpCallBackMessage>)ToLua.CheckObject<UltimateDH.Value<HttpCallBackMessage>>(L, 2);
			obj.CurrentData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentJsonData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.Value<LitJson.JsonData> arg0 = (UltimateDH.Value<LitJson.JsonData>)ToLua.CheckObject<UltimateDH.Value<LitJson.JsonData>>(L, 2);
			obj.CurrentJsonData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentJsonData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HttpActivity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			UltimateDH.AttemptFunc arg0 = (UltimateDH.AttemptFunc)ToLua.CheckObject<UltimateDH.AttemptFunc>(L, 2);
			obj.HttpActivity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HttpActivity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentModel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Http obj = (Http)o;
			HttpModel arg0 = (HttpModel)ToLua.CheckObject<HttpModel>(L, 2);
			obj.CurrentModel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentModel on a nil value");
		}
	}
}

